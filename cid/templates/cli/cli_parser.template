{%- macro cli_element(element) %}
{%- if element|element_type == 'CliOrGroup' -%}
OrGroup([
    {%- for or_el in element.elements %}
{{ cli_element(or_el)|tab_indent }},
    {%- endfor %}
])
{%- elif element|element_type == 'CodeBlock' %}
    {{- raise("Cannot create a parser for a codeblock in the command usage pattern.") }}
{%- elif element|element_type == 'CliGroup' -%}
ParameterGroup([
    {%- for el in element.elements %}
{{ cli_element(el)|tab_indent }},
    {%- endfor %}
])
{%- elif element|element_type == 'CliOptionalGroup' -%}
    {%- if element.elements|length > 1 -%}
OptionalElement(ParameterGroup([
        {%- for el in element.elements %}
{{ cli_element(el)|tab_indent }},
        {%- endfor %}
]))
    {%- else -%}
OptionalElement({{ cli_element(element.elements|first) }})
    {%- endif %}
{%- elif element|element_type == 'CliSeparator' -%}
ParameterSeparator('{{element.value}}')
{%- elif element|element_type == 'Parameter' -%}
parameters['{{element.id}}'].usage_model
{%- endif %}
{%- endmacro -%}

{%- macro usage_model(usage) %}ParameterGroup([
    {%- for element in usage.elements %}
{{ cli_element(element)|tab_indent }},
    {%- endfor %}
    {%- if usage.has_subcommand %}
    SubCommand(),
    {%- endif %}
])
{%- endmacro -%}

{%- macro usages_model(usages) %}
{%- if usages|length > 1 %}OrGroup([
    {%- for usage in usages %}
{{ usage_model(usage)|tab_indent }},
    {%- endfor %}
])
{%- else %}
{{- usage_model(usages|first) }}
{%- endif %}
{%- endmacro -%}

{%- macro parameter_usage_model(parameter) %}
{%- if parameter.nonpositional -%}
NonPositionalParameter('{{parameter.name}}'{% if parameter.multiplicity != 1 %}, multiplicity={{parameter.multiplicity|stringify}}{% endif %})
{%- else -%}
PositionalParameter('{{parameter.name}}'{% if parameter.multiplicity != 1 %}, multiplicity={{parameter.multiplicity|stringify}}{% endif %})
{%- endif %}
{%- endmacro -%}

{%- macro constraint_model(constraint) %}
{%- if constraint|element_type == "NumericValueConstraint" -%}
NumericValueConstraintValidator('{{constraint.type}}', {{constraint.value}}, '''{{constraint.message}}''')
{%- elif constraint|element_type == 'DateConstraint' -%}
DateConstraintValidator('{{constraint.type}}',  datetime.strptime('{{constraint.value}}', '%d.%m.%Y'), '''{{constraint.message}}''')
{%- elif constraint|element_type == 'LengthConstraint' -%}
LengthConstraintValidator('{{constraint.type}}', {{constraint.value}}, '''{{constraint.message}}''')
{%- elif constraint|element_type == 'StringFlagConstraint' -%}
StringFlagConstraintValidator('{{constraint.type}}', '''{{constraint.message}}''')
{%- elif constraint|element_type == 'NumberFlagConstraint' -%}
NumberFlagConstraintValidator('{{constraint.type}}', '''{{constraint.message}}''')
{%- elif constraint|element_type == 'FileFlagConstraint' -%}
FileFlagConstraintValidator('{{constraint.type}}', '''{{constraint.message}}''')
{%- elif constraint|element_type == 'RegexConstraint' -%}
RegexConstraintValidator('{{constraint.value}}', '''{{constraint.message}}''')
{%- elif constraint|element_type == 'CodeConstraint' -%}
CodeConstraintValidator('''{{constraint.value.code}}''', '''{{constraint.message}}''')
{%- endif %}
{%- endmacro -%}

{# ----------------- CODE START ----------------- #}
'''
Automatically generated code. Do not edit directly.
'''

from datetime import datetime
from generic_cli_parser import CommandParserModel, ParameterModel, BasicNonpositional, MultiArgNonpositional, SeparatedNonpositional, \
    CounterNonpositional,   BooleanNonpositional, ParameterGroup, OrGroup, OptionalElement, NonPositionalParameter, \
    PositionalParameter, ParameterSeparator, SubCommand, \
    NumericValueConstraintValidator, DateConstraintValidator, LengthConstraintValidator, StringFlagConstraintValidator, \
    NumberFlagConstraintValidator, FileFlagConstraintValidator, RegexConstraintValidator, CodeConstraintValidator, CommandCodeConstraintValidator, \
    parse_cli_args as _parse_cli_args, invoke_commands as _invoke_commands, print_builtin_help as _print_builtin_help
    
root_command_name = '{{root_command_name}}'
root_command_id = '{{root_command_id}}'

# -------------------- PARAMETER MODEL DEFINITIONS --------------------

parameters = {
{%- for parameter in parameters %}
    '{{parameter.id}}' : ParameterModel(
        name='{{parameter.name}}',
        type='{{parameter.type}}',
        usage_model={{parameter_usage_model(parameter)}},
        default={{parameter.default|stringify}},
        {%- if parameter.nonpositional %}
        parser_models=[{{parameter|parameter_model}}],
        {%- endif %}
        {%- if parameter.date_format %}
        date_format={{parameter.date_format|stringify}},
        {%- endif %}
        {%- if parameter.cli_pattern_vars %}
        cli_pattern_vars={{parameter.cli_pattern_vars}},
        {%- endif %}
        {%- if parameter.constraints %}
        constraints=[
            {%- for constraint in parameter.constraints %}
            {{constraint_model(constraint)}},
            {%- endfor %}
        ],
        {%- endif %}
    ),
{%- endfor %}
}

# -------------------- COMMAND MODEL DEFINITIONS --------------------

commands = {
{%- for command in commands %}
    '{{command.id}}' : CommandParserModel(
        id='{{command.id}}',
        name='{{command.name}}',
        cli_command='{{command.cli_command}}',
        {%- if command.parameters %}
        parameter_models=[
            {%- for parameter in command.parameters %}
            parameters['{{parameter.id}}'],
            {%- endfor %}
        ],
        {%- endif %}
        usage_model={{ usages_model(command.usages)|tab_indent(2, start_from=2) }},
        {%- if command.cli_separators %}
        separators={{command.cli_separators}},
        {%- endif %}
        {%- if command.help_params %}
        builtin_help_params={{command.help_params}},
        {%- endif %}
        {%- if command.long_help_params %}
        builtin_long_help_params={{command.long_help_params}},
        {%- endif %}
        {%- if command.constraints %}
        constraint_validator=CommandCodeConstraintValidator('''{{command.constraints.code_block.code}}''', '''{{command.constraints.message}}'''),
        {%- endif %}
    ),
{%- endfor %}
}

{%- if commands|have_sub_commands %}
# -------------------- SUB COMMANDS --------------------
{% for command in commands %}
    {%- if command.sub_commands %}
commands['{{command.id}}'].sub_commands = [{% for sc in command.sub_commands %}commands['{{sc.id}}'], {% endfor %}]
    {%- endif %}
{%- endfor %}
{%- endif %}

# -------------------- COMMAND USAGE HELP --------------------
{%- for command in commands %}

# {{command.id}} usage_help
commands['{{command.id}}'].usage_help = '''{{command.usage_help}}'''

# {{command.id}} long_usage_help
commands['{{command.id}}'].long_usage_help = '''{{command.long_usage_help}}'''
{%- endfor %}

# -------------------- ARGUMENT PARSING FUNCTIONS --------------------

def get_cli_args():
    import sys
    return sys.argv[1:]
    
_annotated_callbacks = None

class command:
    def __init__(self, name=None, parent=None):
        self.name = name
        self.parent = parent
        
    def __call__(self, func):
        global _annotated_callbacks
    
        self.define_sub_commands(func)
            
        if not self.name:
            self.name = func.__name__
            
        if not self.parent:
            if _annotated_callbacks:
                raise Exception("More than one root command encountered.")
            else:
                _annotated_callbacks = func, func.sub_commands
        else:
            self.define_sub_commands(self.parent)
            self.parent.sub_commands[self.name] = func, func.sub_commands
            
        return func
        
    @staticmethod
    def define_sub_commands(func):
        if not hasattr(func, 'sub_commands'):
            func.sub_commands = {}
            
class CommandInterface:
    def get_callbacks(self):
        callbacks = [callback for callback in [getattr(self, attr_name) for attr_name in dir(self)] if hasattr(callback, 'is_command_method')]
        if not callbacks:
           raise Exception("No callbacks specified.")
        root_commands = [callback for callback in callbacks if not callback.parent]
        if not root_commands:
            raise Exception("No root command specified.")
        if len(root_commands) > 1:
            raise Exception("More than one root command encountered.")
        root_command = root_commands[0]
        
        return root_command, self._get_sub_commands(root_command.name, callbacks)
    
    def _get_sub_commands(self, parent_name, callbacks):
        return {callback.name : (callback, self._get_sub_commands(callback.name, callbacks)) for callback in callbacks if callback.parent and callback.parent.name == parent_name}
    
class command_method:
    def __init__(self, name=None, parent=None):
        self.name = name
        self.parent = parent
        
    def __call__(self, func):
        if not self.name:
            self.name = func.__name__
        func.name = self.name
        func.parent = self.parent
        func.is_command_method = True
        return func

def parse_cli_args(args=None):
    if args is None:
        args = get_cli_args()
    
    return _parse_cli_args(root_command_id, commands, args)
    
def invoke_commands(command_callbacks=None, args=None):
    global _annotated_callbacks
    
    if args is None:
        args = get_cli_args()
    
    if not command_callbacks:
        if not _annotated_callbacks:
            raise Exception("No callbacks provided.")
        command_callbacks = _annotated_callbacks
    
    _invoke_commands(command_callbacks, root_command_id, commands, args)

def print_builtin_help(args=None):
    if args is None:
        args = get_cli_args()
    
    _print_builtin_help(root_command_id, commands, args)
