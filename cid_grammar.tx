
Script:
  imports*=ImportStatement
  elements+=ScriptElement
;

ImportStatement:
  'import' path=ImportReference ('as' alias=ImportReference)?
;

ImportReference[noskipws]:
  /\s*/ '/'elements+=/[\w^\n]+/['/']
;

ScriptElement:
  Parameter|Command
;

// COMMAND ----------

Command:
  type=CommandType name=ID (title=STRING)? (':'
    (
      ('description:' description=STRING)?
      ('help:' help=STRING)?
      ('parameters:' '{' parameters+=CommandParameter '}')?
      ('commands:' '{' sub_commands+=SubCommand '}')?
      ('constraints:' constraints=CodeBlock)?
      ('cli_command:' cli_command=STRING)?
	  ('help_params:' help_params+=STRING[',']|no_help?='None')?
	  ('long_help_params:' long_help_params+=STRING[',']|no_long_help?='None')?
      ('usage:' (usages+=CliStructureMultiLine)|(usage=CliStructure))?
      ('gui:' gui=GuiStructure)?
    )#
  )?
;

CommandType:
  "Cmd"|"Sub"
;

CommandParameter:
  ParameterReference|Parameter
;

SubCommand:
  CommandReference|Command
;

// PARAMETER ----------

Parameter:
  type=ParameterType name=ID (title=STRING)? (':'
    (
      ('description:' description=STRING)?
      ('help:' help=STRING)?
      ('default:' (default+=STRING[',']|default_is_none?='None'))?
      ('empty_str:' (empty_str_allowed?='Allowed'|empty_str_disallowed?='Disallowed'))?
      ('multiplicity:' multiplicity=ParameterMultiplicity)?
      ('widget:' widget=GuiWidget)?
      ('choices:' choices+=ChoiceParameterValue[','])?
      ('date_format:' date_format=STRING)?
      ('cli:' cli=ParameterCliValue (',' cli_aliases+=ParameterCliPattern[','])?)?
      ('constraints:' constraints+=ParameterConstraint)?
    )#
  )?
;

ParameterType:
  "Str"|"Num"|"Bool"|"Date"|"File"|"Choice"
;

EmptyStrAllowed:
  'Allowed'|'Disallowed'
;

ParameterMultiplicity:
  INT|'*'
;

GuiWidget:
  "password"|"text_field"|"text_area"|"dropdown"|"radio_buttons"|"counter"|"slider"
;

ChoiceParameterValue:
  STRING|CodeBlock
;

ParameterCliValue:
  (cli_pattern=ParameterCliPattern)|(code_block=CodeBlock)
;

ParameterCliPattern:
  StringParamPattern|BooleanParamPattern
;

StringParamPattern[noskipws]:
  /\s*/'"'/\s*/ prefix=CliLiteralValue white_space?=/\s+/ '{'/\s*/ ((vars+=StringParamPatternVarName[/\s*,\s*/]) | (count=INT) | (count_many?='*'('|'separator=/./)?) | ('count:'count_char=/\w/))? /\s*/'}' /\s*/'"'
;

StringParamPatternVarName:
	"'" value=/[^']+/ "'"
;

BooleanParamPattern:
  BoolWithPositivePattern|BoolNegativeOnlyPattern
;

BoolWithPositivePattern:
  '"' positive=CliLiteralValue ('|' negative=CliLiteralValue)? '"'
;

BoolNegativeOnlyPattern:
  '"' positive='' '|' negative=CliLiteralValue '"'
;

CliLiteralValue:
  /[\w\-=\/]+/
;

// ----------

ParameterReference:
  !KeyWord (local=ID)|(imported=ImportReference)
;

CommandReference:
  !KeyWord (local=ID)|(imported=ImportReference)
;

KeyWord:
  EmptyStrAllowed|ParameterMultiplicity|"None"|"description:"|"help:"|"usage:"|"parameters:"|
  "commands:"|"cli_command:"|"gui:"|"section"|"stack:"|"grid:"|CommandType|ParameterType
;

CodeBlock:
  "<<"
    code=/(?s)((?!>>).)*/    // matches everything until >> is encountered
  ">>"
;

// CONSTRAINTS ----------

ParameterConstraint:
  NumericValueConstraint|
  DateConstraint|
  LengthConstraint|
  StringFlagConstraint|
  NumberFlagConstraint|
  FileFlagConstraint|
  RegexConstraint|
  CodeConstraint
;

NumericValueConstraint:
  (type='max'|type='min') ':'
    value=FLOAT
    (message=STRING)?
;

DateConstraint:
  (type='max'|type='min') ':'
    value=STRING
    (message=STRING)?
;

LengthConstraint:
  (type='min_length'|type='max_length') ':'
    value=INT
    (message=STRING)?
;

StringFlagConstraint:
  type='alphanumeric' (':'
    message=STRING
  )?
;

NumberFlagConstraint:
  type='integer' (':'
    message=STRING
  )?
;

FileFlagConstraint:
  (type='exists'|type='doesnt_exist'|type='is_file'|type='is_directory') (':'
    message=STRING
  )?
;

RegexConstraint:
  'regex' ':'
    value=RegexConstraintValue
    (message=STRING)?
;

RegexConstraintValue:
  /\/.*\//
;

CodeConstraint:
  'custom' ':'
    value=CodeBlock
    (message=STRING)?
;

// CLI ----------

CliStructureMultiLine:
  '-' body=CliStructure
;

CliStructure:
  elements+=CliElement has_options?="{options}" has_subcommand?="{sub_command}"
;

CliElement:
  CliOrGroup|CliBasicEllement
;

CliBasicEllement:
  CodeBlock|CliOptionalGroup|CliSeparator|ParameterReference
;

CliSeparator:
  ("{separator|"value=/[^}]+/"}")|value="--"
;

CliGroup:
  '(' elements+=CliElement ')'
;

CliOptionalGroup:
  '[' elements+=CliElement ']'
;

CliOrGroup:
  ((lhs=CliBasicEllement|lhs=CliGroup) '|' (rhs=CliOrGroup|rhs=CliGroup|rhs=CliBasicEllement))
;

// GUI ----------

GuiStructure:
  elements+=GuiElement
;

GuiElement:
  GuiTabs|GuiSectionGroup|GuiSection|GuiGrid|GuiGridRow|ParameterReference
;

GuiTabs:
  'tabs:'
    elements+=GuiTab
;

GuiTab:
  title=STRING ':'
  '{'
    body=GuiStructure
  '}'
;

GuiSectionGroup:
  'sections:'
  exclusive?='exclusive'
  '{'
    elements+=GuiSection
  '}'
;

GuiSection:
  'section' (title=STRING)? ':'
  ((expanded?='expanded')?
   (optional?='optional')?)#
  '{'
    body=GuiStructure
  '}'
;

GuiGrid:
  "grid:"
  '{'
    elements+=GuiGridRow
  '}'
;

GuiGridRow:
  '[' elements+=GuiGridCell['|'] ']'
;

GuiGridCell:
  EmptyCell|CellSpan|ParameterReference
;

EmptyCell:
  body=/_+/
;

CellSpan:
  body=/>+/
;

Comment:
  /#.*$/
;
